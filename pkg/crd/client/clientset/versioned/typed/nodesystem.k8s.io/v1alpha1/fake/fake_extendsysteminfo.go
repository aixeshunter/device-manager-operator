/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	"context"
	v1alpha1 "hikvision.com/cloud/device-manager/pkg/crd/apis/nodesystem.k8s.io/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeExtendSystemInfos implements ExtendSystemInfoInterface
type FakeExtendSystemInfos struct {
	Fake *FakeNodesystemV1alpha1
}

var extendsysteminfosResource = schema.GroupVersionResource{Group: "nodesystem.k8s.io", Version: "v1alpha1", Resource: "extendsysteminfos"}

var extendsysteminfosKind = schema.GroupVersionKind{Group: "nodesystem.k8s.io", Version: "v1alpha1", Kind: "ExtendSystemInfo"}

// Get takes name of the extendSystemInfo, and returns the corresponding extendSystemInfo object, and an error if there is any.
func (c *FakeExtendSystemInfos) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ExtendSystemInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootGetAction(extendsysteminfosResource, name), &v1alpha1.ExtendSystemInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ExtendSystemInfo), err
}

// List takes label and field selectors, and returns the list of ExtendSystemInfos that match those selectors.
func (c *FakeExtendSystemInfos) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ExtendSystemInfoList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootListAction(extendsysteminfosResource, extendsysteminfosKind, opts), &v1alpha1.ExtendSystemInfoList{})
	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &v1alpha1.ExtendSystemInfoList{ListMeta: obj.(*v1alpha1.ExtendSystemInfoList).ListMeta}
	for _, item := range obj.(*v1alpha1.ExtendSystemInfoList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested extendSystemInfos.
func (c *FakeExtendSystemInfos) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewRootWatchAction(extendsysteminfosResource, opts))
}

// Create takes the representation of a extendSystemInfo and creates it.  Returns the server's representation of the extendSystemInfo, and an error, if there is any.
func (c *FakeExtendSystemInfos) Create(ctx context.Context, extendSystemInfo *v1alpha1.ExtendSystemInfo) (result *v1alpha1.ExtendSystemInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootCreateAction(extendsysteminfosResource, extendSystemInfo), &v1alpha1.ExtendSystemInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ExtendSystemInfo), err
}

// Update takes the representation of a extendSystemInfo and updates it. Returns the server's representation of the extendSystemInfo, and an error, if there is any.
func (c *FakeExtendSystemInfos) Update(ctx context.Context, extendSystemInfo *v1alpha1.ExtendSystemInfo) (result *v1alpha1.ExtendSystemInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateAction(extendsysteminfosResource, extendSystemInfo), &v1alpha1.ExtendSystemInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ExtendSystemInfo), err
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().
func (c *FakeExtendSystemInfos) UpdateStatus(ctx context.Context, extendSystemInfo *v1alpha1.ExtendSystemInfo) (*v1alpha1.ExtendSystemInfo, error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootUpdateSubresourceAction(extendsysteminfosResource, "status", extendSystemInfo), &v1alpha1.ExtendSystemInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ExtendSystemInfo), err
}

// Delete takes name of the extendSystemInfo and deletes it. Returns an error if one occurs.
func (c *FakeExtendSystemInfos) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewRootDeleteAction(extendsysteminfosResource, name), &v1alpha1.ExtendSystemInfo{})
	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeExtendSystemInfos) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewRootDeleteCollectionAction(extendsysteminfosResource, listOptions)

	_, err := c.Fake.Invokes(action, &v1alpha1.ExtendSystemInfoList{})
	return err
}

// Patch applies the patch and returns the patched extendSystemInfo.
func (c *FakeExtendSystemInfos) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ExtendSystemInfo, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewRootPatchSubresourceAction(extendsysteminfosResource, name, pt, data, subresources...), &v1alpha1.ExtendSystemInfo{})
	if obj == nil {
		return nil, err
	}
	return obj.(*v1alpha1.ExtendSystemInfo), err
}
