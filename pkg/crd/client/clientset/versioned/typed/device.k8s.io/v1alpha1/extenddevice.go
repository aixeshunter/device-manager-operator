/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by client-gen. DO NOT EDIT.

package v1alpha1

import (
	"context"
	"time"

	v1alpha1 "hikvision.com/cloud/device-manager/pkg/crd/apis/device.k8s.io/v1alpha1"
	scheme "hikvision.com/cloud/device-manager/pkg/crd/client/clientset/versioned/scheme"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	rest "k8s.io/client-go/rest"
)

// ExtendDevicesGetter has a method to return a ExtendDeviceInterface.
// A group's client should implement this interface.
type ExtendDevicesGetter interface {
	ExtendDevices() ExtendDeviceInterface
}

// ExtendDeviceInterface has methods to work with ExtendDevice resources.
type ExtendDeviceInterface interface {
	Create(context.Context, *v1alpha1.ExtendDevice) (*v1alpha1.ExtendDevice, error)
	Update(context.Context, *v1alpha1.ExtendDevice) (*v1alpha1.ExtendDevice, error)
	UpdateStatus(context.Context, *v1alpha1.ExtendDevice) (*v1alpha1.ExtendDevice, error)
	Delete(ctx context.Context, name string, options *v1.DeleteOptions) error
	DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error
	Get(ctx context.Context, name string, options v1.GetOptions) (*v1alpha1.ExtendDevice, error)
	List(ctx context.Context, opts v1.ListOptions) (*v1alpha1.ExtendDeviceList, error)
	Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error)
	Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ExtendDevice, err error)
	ExtendDeviceExpansion
}

// ExtendDevices implements ExtendDeviceInterface
type ExtendDevices struct {
	client rest.Interface
}

// newExtendDevices returns a ExtendDevices
func newExtendDevices(c *DeviceV1alpha1Client) *ExtendDevices {
	return &ExtendDevices{
		client: c.RESTClient(),
	}
}

// Get takes name of the ExtendDevice, and returns the corresponding ExtendDevice object, and an error if there is any.
func (c *ExtendDevices) Get(ctx context.Context, name string, options v1.GetOptions) (result *v1alpha1.ExtendDevice, err error) {
	result = &v1alpha1.ExtendDevice{}
	err = c.client.Get().
		Resource("ExtendDevices").
		Name(name).
		VersionedParams(&options, scheme.ParameterCodec).
		Do(ctx).
		Into(result)
	return
}

// List takes label and field selectors, and returns the list of ExtendDevices that match those selectors.
func (c *ExtendDevices) List(ctx context.Context, opts v1.ListOptions) (result *v1alpha1.ExtendDeviceList, err error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	result = &v1alpha1.ExtendDeviceList{}
	err = c.client.Get().
		Resource("ExtendDevices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Do(ctx).
		Into(result)
	return
}

// Watch returns a watch.Interface that watches the requested ExtendDevices.
func (c *ExtendDevices) Watch(ctx context.Context, opts v1.ListOptions) (watch.Interface, error) {
	var timeout time.Duration
	if opts.TimeoutSeconds != nil {
		timeout = time.Duration(*opts.TimeoutSeconds) * time.Second
	}
	opts.Watch = true
	return c.client.Get().
		Resource("ExtendDevices").
		VersionedParams(&opts, scheme.ParameterCodec).
		Timeout(timeout).
		Watch(ctx)
}

// Create takes the representation of a ExtendDevice and creates it.  Returns the server's representation of the ExtendDevice, and an error, if there is any.
func (c *ExtendDevices) Create(ctx context.Context, ExtendDevice *v1alpha1.ExtendDevice) (result *v1alpha1.ExtendDevice, err error) {
	result = &v1alpha1.ExtendDevice{}
	err = c.client.Post().
		Resource("ExtendDevices").
		Body(ExtendDevice).
		Do(ctx).
		Into(result)
	return
}

// Update takes the representation of a ExtendDevice and updates it. Returns the server's representation of the ExtendDevice, and an error, if there is any.
func (c *ExtendDevices) Update(ctx context.Context, ExtendDevice *v1alpha1.ExtendDevice) (result *v1alpha1.ExtendDevice, err error) {
	result = &v1alpha1.ExtendDevice{}
	err = c.client.Put().
		Resource("ExtendDevices").
		Name(ExtendDevice.Name).
		Body(ExtendDevice).
		Do(ctx).
		Into(result)
	return
}

// UpdateStatus was generated because the type contains a Status member.
// Add a +genclient:noStatus comment above the type to avoid generating UpdateStatus().

func (c *ExtendDevices) UpdateStatus(ctx context.Context, ExtendDevice *v1alpha1.ExtendDevice) (result *v1alpha1.ExtendDevice, err error) {
	result = &v1alpha1.ExtendDevice{}
	err = c.client.Put().
		Resource("ExtendDevices").
		Name(ExtendDevice.Name).
		SubResource("status").
		Body(ExtendDevice).
		Do(ctx).
		Into(result)
	return
}

// Delete takes name of the ExtendDevice and deletes it. Returns an error if one occurs.
func (c *ExtendDevices) Delete(ctx context.Context, name string, options *v1.DeleteOptions) error {
	return c.client.Delete().
		Resource("ExtendDevices").
		Name(name).
		Body(options).
		Do(ctx).
		Error()
}

// DeleteCollection deletes a collection of objects.
func (c *ExtendDevices) DeleteCollection(ctx context.Context, options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	var timeout time.Duration
	if listOptions.TimeoutSeconds != nil {
		timeout = time.Duration(*listOptions.TimeoutSeconds) * time.Second
	}
	return c.client.Delete().
		Resource("ExtendDevices").
		VersionedParams(&listOptions, scheme.ParameterCodec).
		Timeout(timeout).
		Body(options).
		Do(ctx).
		Error()
}

// Patch applies the patch and returns the patched ExtendDevice.
func (c *ExtendDevices) Patch(ctx context.Context, name string, pt types.PatchType, data []byte, subresources ...string) (result *v1alpha1.ExtendDevice, err error) {
	result = &v1alpha1.ExtendDevice{}
	err = c.client.Patch(pt).
		Resource("ExtendDevices").
		SubResource(subresources...).
		Name(name).
		Body(data).
		Do(ctx).
		Into(result)
	return
}
